# Dockerized Node.js + MongoDB Setup

This project sets up a Node.js application with MongoDB using Docker and Docker Compose. The database runs in a container with persistent storage, eliminating the need for a local MongoDB installation.

## Prerequisites
- [Docker](https://www.docker.com/get-started) installed
- [Docker Compose](https://docs.docker.com/compose/) installed

## Setup Instructions

### 1. Clone the Repository
```sh
git clone <repository-url>
cd <project-directory>
```

### 2. Create a `.env` File (Optional)
Create a `.env` file in the root directory to manage environment variables:
```
MONGO_URI=mongodb://mongo:27017/Node-API
PORT=3000
```

### 3. Start the Containers
Run the following command to build and start the containers:
```sh
docker-compose up --build
```
For detached mode (running in the background):
```sh
docker-compose up -d
```

### 4. Stop the Containers
To stop and remove the running containers:
```sh
docker-compose down
```

### 5. View Logs
To check logs for the Node.js application:
```sh
docker-compose logs -f app
```
To check logs for MongoDB:
```sh
docker-compose logs -f mongo
```

## Persistent Storage
MongoDB data is stored in a Docker volume (`mongo-data`) to ensure data is not lost when containers are stopped.

### Verify Data Persistence
1. Start the containers:
   ```sh
   docker-compose up -d
   ```
2. Access MongoDB inside the container:
   ```sh
   docker exec -it mongodb mongosh
   ```
   (For older versions, use `mongo` instead of `mongosh`)
3. Insert sample data:
   ```js
   use testdb
   db.users.insertOne({ name: "Alice", age: 25 })
   ```
4. Stop the containers:
   ```sh
   docker-compose down
   ```
5. Restart the containers:
   ```sh
   docker-compose up -d
   ```
6. Reconnect to MongoDB and check if the data persists:
   ```sh
   docker exec -it mongodb mongosh
   use testdb
   db.users.find()
   ```

## Connecting to MongoDB Locally
To connect using **MongoDB Compass** or other local tools, use:
```
mongodb://localhost:27017
```

This works because the `docker-compose.yml` file exposes port `27017` for MongoDB.

---

Your Node.js application and MongoDB are now running in Docker with persistent storage. ðŸŽ‰ Let me know if you need further assistance! ðŸš€

